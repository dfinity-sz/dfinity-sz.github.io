{"title":"为Dfinity量身打造的开发语言——Motoko","uid":"e2798502021492e3c72cf1d128ee5148","slug":"motoko","date":"2021-06-27T07:11:00.000Z","updated":"2021-07-20T08:59:58.860Z","comments":true,"path":"static/api/articles/motoko.json","keywords":null,"cover":"https://github.com/dfinity-sz/dszimg/blob/main/motokofm.png?raw=true","content":"<img src=\"https://github.com/dfinity-sz/dszimg/blob/main/DfinitySZ.jpg?raw=true\" width=\"100%\">\n\n<p>Motoko是一种编程语言，是一种无缝支持Dfinity的编程模型，从而可以轻松高效的构建应用程序也具有独特的特性，Motoko是强类型的并且具有正交持久性和异步消息传递的内置支持的开发语言。</p>\n<p><b><a href=\"https://github.com/dfinity/motoko\">Motoko源编译器、解释器、测试套件和开发文档和开源代码</a></b></p>\n<p>Motoko开发和安全特性包括自动化内存管理、支持泛型语言、类型推断、模式匹配以及任何精度和固定精度算法。消息传递采用了接口语言（Candid）和有线格式，以实现类型化、跨语言的互操作性。</p>\n<img width=\"1000src\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/4.96.gif?raw=true\">\n\n<br />\n\n<p align=\"center\">\n<img width=\"50\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/motokotubia.png?raw=true\"/>\n</p>\n<p align=\"center\">\nWebssembly\n</p>\n\n<p>要理解Motoko语言首先得了解一下Webssembly（wasm），Wasm是一种新的低级代码格式，但是实现了可移植性、安全性、高效性，并且Wasm不针对任何特定的编程语言、格式、计算环境或平台，并且它完全不依赖网络，因此wasm可以在很多环境中得到采用，例如云计算、边缘计算、移动、嵌入式系统、物联网、区块链等等。Wasm是基于很多考虑因素设计的，关于wasm的技术详解、设计选择、形式语义和实现技术的相关内容观看一下PDF。</p>\n<p><b><a href=\"https://github.com/WebAssembly/spec/blob/master/papers/pldi2017.pdf\">WasmPDF技术文档链接</a></b></p>\n<p>Wasm与其他虚拟机的区别在于它不针对任何特定的开发语言进行优化，只是抽象了底层硬件和字节码直接对应现代CPU的指令和内存模型，最重要的是Wasm通过模块化和数学规范支持沙箱来确保执行是安全的，而且这些属性也有经过机器验证的数学证明。</p>\n<p>基于Wasm的便携性、安全性、通用性和性能特性使它在Dfinity中开发程序是一个很不错的选择，但是将现有的编程用语言移植到Wasm不是一件简单的事情，而且还需要实现一个新的编译器后端和移植语言运行系统和库原语。现在有一些高级语言相关的特性，目前还无法在Wasm中实现，例如：线程、协程、异常、尾调等。</p>\n<p>现在Wasm支持的开发语言主要有C、 C++和Rust，在Dfinity开发中实现访问性，生产力，和高保证的开发语言更高效。</p>\n<p>同时Dfinity的开发语言需要具有异步消息传递的分布式编程模型、Cycles等资源概念以及其他的一些特性但是，一种本身包含适当结构的语言可以提供更加无缝的编程体验。</p>\n<p align=\"center\">\n<img width=\"50\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/motokotubia.png?raw=true\"/>\n</p>\n<p align=\"center\">\nMotoko  \n</p> \n\n<p>基于以上问题Dfinity基金会创建Mokoto语言的原因，安全、易于使用、无缝编程、并且是开源语言。Motoko语言内部是一种现代语言，每个构造都是表达式，它有着闭包和变体类型以及静态检查模式匹配，有垃圾收集等等特性，当然它有一个健全灵活的类型系统来保证不存在 崩溃、未定义的行为、曲解数据或在Swaitch中遗漏了一个case。</p>\n<p>同时Motoko的设计还包含了很多小决策，以最大限度的减少脚本和安全方面的错误，像默认情况数值不能溢出，默认情况下局部变量是不可变的，默认情况下并发执行是原子的，默认情况下不能出现null，默认情况下字段是私有的。</p>\n<p>编译Motoko语言的是Wasm编译器，使用Ocaml编写的Motoko编译器使用类型化表示，然后经过几次转化之后输出Wasm字节码，生成的Wasm模块包括一个C和Rust编写的小型运行系统，主要实现一个简单的垃圾收集器，使用Wasm内存作为其他堆。                </p>\n<p align=\"center\">\n<img width=\"50\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/motokotubia.png?raw=true\"/>\n</p>\n<p align=\"center\">\nActor\n</p>\n\n<p>Motolo的核心特征是它在语法和类型系统中对Actor的直接支持，Actor就像一个对象，因为它封装了私有状态以及有一组方法来处理可以发送给它的消息，所有消息发送都是异步的，因此面向对象中的传统开发方法不同，Actor方法没有结果，所有消息都是由参与者顺序接收—也就是它有一个隐式的消息队列和方法并且原子执行，即使消息式并发式的发送。</p>\n<p>Acttors是并发编程的一个很好的模型，它会自动防止竞争的条件（由于原子性和封装状态）和死锁（因为执行永远不会阻塞），因此排除了许多并发错误。Actors也是分布式编程的一个很好的模型，异步会处理消息发送到潜在的远程接收器所设计的延迟，Actors模型非常适用在Dfinity开发上，其中应用程序中的软件容器也是采用了Actors模型，参与者可以跨子网通信的Wasm模块。所以Motoko Actor编译未Wasm模块，其中方法成为具有平台定义特殊约定到处Wasm函数。</p>\n<p>Motoko中的应用程序是一个或者多个Actor，它又是一个编译成Wasm模块的大型异步对象，使用Wasm的内存概念，这样参与者可以立即管理多达4GIB的内部状态，或者可以通过多个Wasm模块来进一步扩大内存状态，每个模块都有自己的内存。</p>\n<p align=\"center\">\n<img width=\"50\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/motokotubia.png?raw=true\"/>\n</p>\n<p align=\"center\">\nFutures\n</p>\n\n<p>为了使异步编程更方便并允许以顺序表达，Motoko采用了：Futures。在Motoko中它们以 ‘异步值’的形式具体化代码：<br>[ async t]<br>既由带有</p>\n<pre name=\"code\" class=\"java\">async</pre>\n<p>关键词前缀的表达式生成的类型值。特别是函数体可以是一个异步表达式，从而自然的替换和概括存在于其他的一些语言中的‘异步函数’的更单一的概念。</p>\n<p>Actor是允许有结果的，只要这些是Future，可以等待Future来获取它们的值，但只能在另一个异步表达式中，类似于其他现代语言中一直的async/await monad。</p>\n<p>Motoko编译器通过传统CPS转换来实现这一点，将每 一个等待点转换为一个单独的Wasm函数（闭包环境）代表等待的延续，他是双管CPS，因为每条消息也可以带有各自失败延续的失败回复，按照惯例，具有异步结果的方法是发送带有结果值作为参数回复消息的方法。这个消息被创建延续函数的接收，然后它可以恢复它捕获的执行。在此期间它可以自由的接受其他消息。</p>\n<p align=\"center\">\n<img width=\"50\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/motokotubia.png?raw=true\"/>\n</p>\n<p align=\"center\">\nPersistence\n</p>\n\n<p>Motoko最重要的因素是允许开发人员利用区块链技术，而无需学习全新的计算类型。使用Motoko没有用于更新区块链状态的显式构造，也没有用于将数据库写入持久存储的其他API，相反Dfinity实现了正交持久性，其中程序可以永远运行错觉，并且他的内存保持活动状态，在Motoko中这就意味着开发人员不必担心在消息之间明确保存他们的数据，也不必担心文件或外部数据库：存储在程序变量中的任何数值和数据结构在下一条消息到达前仍然存在。</p>\n<p>Persistence负责在方法调用、保存和回复容器的私有状态。这相对容器改装到wasm引擎上，因为Wasm模块的状态在模块的内存、全局变量和表中是隔离的。在大多数情况下，使用操作系统公开的虚拟内存技术观看Wasm内存，并且可以采取任何措施来持久化页面，以及为分布式共识协议分散它们。</p>\n<p align=\"center\">\n<img width=\"50\" src=\"https://github.com/dfinity-sz/dszimg/blob/main/motokotubia.png?raw=true\"/>\n</p>\n<p align=\"center\">\nCandid接口\n</p>\n\n<p>Dfinity运行Wasm，所以Motoko只是创建程序的一种语言，在Dfinity上RUST和其他语言都会统一编译成以Wasm的容器，不管是用任何语言编写的容器他们都之间都可以互相通信。</p>\n<p>为了明确这种互操作性，引入了Candid通用接口定义语言，它是Dfinity网络上通信语言，完全独立于Motoko，它描述了容器能理解的一组消息以及随同发送的数据类型，在Candid中，数据通过独立于Motoko类型系统或任何其他编程语言你的规范类型（数值、脚本、数组、记录、变量、函数、对其他容器的引用）的组合进行综合描述。</p>\n<p>Motoko编译器可以自动使用和生成这样的接口描述，用于Actor的导出和导入，并将它们映射到相应的Motoko类型。它还自动生成正确的Wasm代码来序列化和反序列化每条 信息的参数数据，透明的将Motoko的内部描述与Candid指定的二进制格式相互转换。</p>\n<p>通过这种方式，Motoko程序可以有类型的方式与外部容器进行通信，并秒速远程调用程序中的本地对象。不管是C还是Rust语言编写的容器度可以远程调用：容器的接口足以作为类型信息，接口还提供了一种强大的模块化形式，其中程序可以针对其他参与者/容器进行类型检查，而无需访问它们的实现。</p>\n<p>所有的语言都在Wasm中编译为容器，所有的语言都通过Candid无缝通信，Motoko也是开发语言中的一种，使用Motoko语言可以直接将前后端代码统一，并支持一键部署及测试，同时Motoko语言支持其他很多语言，如：C语言和Rust语言等，如果你是一名开发者目前想要在本地部署一个容器可以参考下方视频，目前把容部署到主网上需要白名单，若是看了本篇文章有不理解或者有开发问题可以联系我们。</p>\n<p>本地容器开发参考：</p>\n<p>Dfinity深圳社区，专注于Dfinity生态技术发展交流与优质项目挖掘分析。</p>\n","text":" Motoko是一种编程语言，是一种无缝支持Dfinity的编程模型，从而可以轻松高效的构建应用程序也具有独特的特性，Motoko是强类型的并且具有正交持久性和异步消息传递的内置支持的开发语言。 Motoko源编译器、解释器、测试套件和开发文档和开源代码 Motoko开发和安全特...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Dfinity技术","slug":"Dfinity技术","count":7,"path":"static/api/categories/Dfinity技术.json"}],"tags":[],"toc":"","author":{"name":"DfinitySZ","slug":"dfinitysz","avatar":"/static/img/sz.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Dfinity是否有抛售90%的ICP代币？","uid":"19ac5ca75de22b4cee043cad6c11bba6","slug":"Dfinityicp","date":"2021-06-29T07:11:00.000Z","updated":"2021-07-19T12:21:30.246Z","comments":true,"path":"static/api/articles/Dfinityicp.json","keywords":null,"cover":"https://github.com/dfinity-sz/dszimg/blob/main/fm.jpg?raw=true","text":" ICP通证从5月10号上线各大交易所的48天时间里，价格从最高630美元一度跌至最低27美元，市值也随之缩水96%。目前随着ICP的一路下跌市场情绪随之变得低迷，很多社区持币者都为此产生了对ICP的不同看法。近期在Twitter和Reddit社交平台有用户发布了基金会将90% ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Dfinity系列文章","slug":"Dfinity系列文章","count":20,"path":"static/api/categories/Dfinity系列文章.json"}],"tags":[],"author":{"name":"DfinitySZ","slug":"dfinitysz","avatar":"/static/img/sz.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"详解Dfinity节点机器配置和挖矿模型","uid":"5a861cbb6c024220157dd28b9724d730","slug":"node","date":"2021-06-27T07:11:00.000Z","updated":"2021-07-20T06:10:04.094Z","comments":true,"path":"static/api/articles/node.json","keywords":null,"cover":"https://github.com/dfinity-sz/dszimg/blob/main/nodefm.jpg?raw=true","text":" Dfinity网络上运行的节点目前的都是部署在世界各地的数据中心上的，这些数据中心通过运行ICP协议来结合这些节点的结算能力，随着NNS扩展Dfinity大的容量，未来还会添加越来越多的节点通过子网进行无限扩容，目前部署在Dfinity网络上的数据中心已经有18个。 具体分布可...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Dfinity技术","slug":"Dfinity技术","count":7,"path":"static/api/categories/Dfinity技术.json"}],"tags":[],"author":{"name":"DfinitySZ","slug":"dfinitysz","avatar":"/static/img/sz.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}